rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidFile() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImage();
    }
    
    // User's private files
    match /users/{userId}/private/{allPaths=**} {
      allow read, write: if isOwner(userId) && isValidFile();
    }
    
    // Public files
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidFile();
    }
    
    // Deny all other access by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
